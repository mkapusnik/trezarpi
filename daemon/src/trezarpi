#!/usr/bin/env python
import RPi.GPIO as GPIO
import socket
import smtplib
import ConfigParser
import traceback
import easyi2c
import sys
from time import sleep
from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException

ledPin = 4

cfgfile = sys.argv[1] + '/trezarpi.conf'
with open(cfgfile, 'r') as config:
  configParser = ConfigParser.ConfigParser()
  configParser.readfp(config)

  username = configParser.get('mail', 'username')
  password = configParser.get('mail', 'password')
  address = configParser.get('mail', 'address')
  
  rpcuser = configParser.get('rpc', 'username')
  rpcpass = configParser.get('rpc', 'password')
  
  i2c = configParser.get('display', 'i2c')

dev = easyi2c.IIC(i2c, 1)
if dev:
  dev.i2c([31, 0xc], 0)

def sendmail(message):
  if not username or not password or not address:
    return

  try:
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.ehlo()
    server.login(username, password)
    server.sendmail('tzc@raspberry.pi', address, 'Subject: TZC Wallet\n'+message)
    server.quit()
  except Exception:
    print(traceback.format_exc())

def lcd(title, message=''):
  try:
    dev.i2c([31, 1], 0)
    sleep(0.01)
    for t in title:
      dev.i2c([32, ord(t), 0],0)
    dev.i2c([31, 0xc0], 0)
    for m in message:
      dev.i2c([32, ord(m), 0],0)
  except Exception:
    print(traceback.format_exc())

def lcdstatus(type):
  balance = '{:>16}'.format('N/A')
  try:
    rpc_connection = AuthServiceProxy("http://%s:%s@127.0.0.1:17299"%(rpcuser, rpcpass), timeout=10)
    info = rpc_connection.getinfo()
    balance = '{:16.2f}'.format(info['balance'])
  except socket.timeout:
    pass #balance = '{:>16}'.format('Timeout')
  except:
    print(traceback.format_exc())
  lcd('Balance:', balance)

def main():
  try:
    lcd('Daemon', 'Starting')
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)
    GPIO.setup(ledPin, GPIO.OUT)
    GPIO.output(ledPin, False)
    prev_status = False
    while True:
      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      status = sock.connect_ex(('127.0.0.1', 17298)) == 0
      GPIO.output(ledPin, status)
      if prev_status and not status:
        sendmail('Crashed')
        lcd('Wallet Status:', 'Crashed')
      if not prev_status and status:
        sendmail('Started')
        lcd('Wallet Status:', 'Started')
      if status and rpcuser and rpcpass:
        lcdstatus(1)
      prev_status = status
      sleep(5)
  finally:
    lcd('Daemon', 'Shutting Down')
    dev.close()
    GPIO.cleanup()

main()